import codecs
import string

import math
import nltk
import numpy



def file_cleaner(file):
    content_all_files = []
    content = codecs.open(file, encoding='utf-8', errors='replace')
    for line in content.readlines():
        line = "".join(ch for ch in line if ch not in set(string.punctuation))
        tokens = nltk.word_tokenize(line)
        tokens = ' '.join(tokens)
        for word in tokens.split(" "):
            content_all_files.append(word)
    return content_all_files

def find_ngrams(input_list, n):
    return zip(*[input_list[i:] for i in range(n)])

def create_ngram_dictionary(n_gram_generated):
    dictionary_n_gram = {}
    for n_gram in n_gram_generated:
        if n_gram not in dictionary_n_gram:
            dictionary_n_gram[n_gram] = 1
        else:
            dictionary_n_gram[n_gram] += 1

    return dictionary_n_gram

def n_grams_filtered(file_clean, n):
    return find_ngrams(file_clean, n)


def calculate_prob(n_gram_dictionary, n_grams_filtered, n):
    i = 0
    prob = 1
    size = len(n_grams_filtered)
    for n_gram in n_grams_filtered:
        if not i % n == 0:
            prob *= (0 + 1.0)/(size + len(n_gram_dictionary))
        else:
            prob *= (n_gram_dictionary[n_gram] + 1.0) / (size + len(n_gram_dictionary))
        size -= 1
        i += 1
    print "Valor da probabilidade :", prob
    return prob

def sigma_calculator(pw, qw):
    print "Valor do sigma e :",  pw * math.log(pw, qw)
    return pw * math.log(pw, qw)

def initializer():
    input_list_clean = file_cleaner('testeex4')
    n_gram_generated = find_ngrams(input_list_clean, 2)
    n_gram_dictionary = create_ngram_dictionary(n_gram_generated)
    n_gram_filtered = n_grams_filtered(input_list_clean, 2)
    pw = calculate_prob(n_gram_dictionary,n_gram_filtered, 2)
    qw = calculate_prob(n_gram_dictionary,n_gram_filtered, 1)
    sigma_calculator(pw, qw)

initializer()



def calc_prob(file_clean, n, n_gram, n_gram_generated):
    if n == 1:
        produtorium = n_gram_generated[n_gram] / len()

    if n == 2:
        produtorium = list_aux[2][n_gram] / list_aux[1][n_gram[0]]

    return produtorium
