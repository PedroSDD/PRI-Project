def pageRankExtended(grafo, node, ):
    d = 0.15

    res_parcel_1 = d * (prior / sumPrior) + (1-d)


def sumPrior(grafo):

 sum_res = 1.0
    for key_phrase in graph:
        if key_phrase_pj in graph:
            print graph[key_phrase_pk]
            for key_phrase_aux in graph[key_phrase_pk]:
                print key_phrase_aux
                if key_phrase_pj == key_phrase_aux:
                    sum_res = (0.375*0.25)/(sumDenominator(graph, key_phrase_pk, key_phrase_pj))
    print sum_res
    return sum_res


    def calculatePrior(graph, node, flag):
    probability = 1.0
    if flag != 0:
        for keyphrase in graph:
            if keyphrase == node:
                probability += 1
        return probability
    return probability




    def score_candidates(filename):

    file_name = open(filename)
    train = fetch_20newsgroups(subset='train')
    vectorizer = TfidfVectorizer(use_idf=False, stop_words='english', ngram_range=(1, 3))
    vectorizer.fit_transform(train.data)
    my_doc_tfidf = vectorizer.transform(file_name)

    feature_names = vectorizer.get_feature_names()
    dense = my_doc_tfidf.todense()
    densed_idf = dense[0].tolist()[0]
    scores = zip(range(0, len(densed_idf)), densed_idf)
    feature_sorted = sorted(scores, key=itemgetter(1))[-5:]

    feature_name_sorted = []
    key_phrases_dic = {}
    key_phrases_values = {}

    for pair in feature_sorted:
        feature_name_sorted.append(feature_names[pair[0]])
        key_phrases_values[feature_names[pair[0]]] = pair[1]

    for word in feature_name_sorted:
        key_phrases_dic[word] = 0


    return key_phrases_dic, key_phrases_values, feature_name_sorted

def phrases_spliter(filename):
    list_phrases = []
    with open(filename, 'r') as file:
        all_phrases = file.read().strip().split('.')
        for words in all_phrases:
            list_phrases.append(words.split())
        return list_phrases

def create_graph(list_phrases, key_phrases_dic):
    graph = {}
    list_keywords_phrase = []
    for phrase in list_phrases:
        for word in phrase:
            if word in key_phrases_dic:
                list_keywords_phrase.append(word)
                graph[word] = list_keywords_phrase
        list_keywords_phrase = []
    return graph



    def pageRank(grafo, d, l):
    resultado = {}
    invertido = {}

    for key, value in grafo.iteritems():

        if key not in invertido.keys():
            invertido[key] = []
        for reference in value:
            if reference not in invertido.keys():
                invertido[reference] = []
            invertido[reference].append(key)

    numPages = len(grafo)
    for key, value in grafo.iteritems():
        resultado[key] = 1/(numPages*1.0)

    N = (numPages*1.0)
    for times in range(1, l+1):
        anterior = resultado.copy()
        for page in resultado.keys():

            somatorio = 0
            for reference in grafo[page]:
                v = anterior[reference] / (len(invertido[reference])*1.0)
                somatorio += anterior[reference]/(len(invertido[reference])*1.0)
            resultado[page] = (1-d) * 1.0 / N + d * somatorio
    print resultado
    return resultado



    They served in the army together.
Shall i go to US Navy? I went to the Marines.
I saw hacksaw ridge.
Tony Sproul went to Harvard. I like the Marines.
I bought an Android. Did you see him in London?
Do you like Strattford upon Avon? Will Brexit really
happen? I like tuna.
I do not like it. Go Gina Miller. Go anthony do surf. Go Manchester.
Hacksaw ridge, what a movie. I enjoy. I am going to New York City.
I like New York Red Bulls. I like New York City.My name is Braz.
With only about a month and a half before the New Year, it's time to start thinking about those resolutions. Is it time for that dream job you've always wanted?
Luckily, you don't have to wait until next year to start your job search. Check out these 17 companies that are hiring and making offers now!
We've just updated our Angular 2 course to teach the latest features, including the newly introduced Angular Modules.
Play the course now to start learning the latest and greatest in Angular 2, or jump right to building with our latest Watch Us Build episode.
Inspiring Companies Hiring Now
As Thanksgiving approaches, millions of Americans begin to take the time to think about what they're thankful for and give back to their communities. But giving back doesn't have to be seasonal.
We've gathered 11 companies who are passionate and active about philanthropy every day of the year. And you're in luck—they're all hiring!
Greetings from somewhere other than Lisbon, where I, much to my chagrin, this year could not join you. I trust Paddy Cosgrave has identified some good Guinness stops for the pub-crawl in Portugal’s beautiful capital. You can’t escape the Irish.

While I couldn’t be there, my colleagues at ONE are, to launch a campaign to get the public and private sectors working together to make sure 350 million women and girls in the world’s least-developed countries can get connected to the internet by 2020. Their latest report shows that the digital divide is becoming a digital chasm when it comes to women and girls — who are a third less likely to be connected to the internet than men and boys.

As Juliana Rotich, Co-Founder of BRCK, puts it: “Poverty is sexist in many ways, but this growing gender gap in online access needs to be closed, and quickly. Access is a great equaliser and when women and girls in the most marginalised communities do get online, mothers can make sure their babies are gaining weight properly, farmers can check on market prices, and girls can learn how to read, write and code even if school might be an hour’s walk away."

If you want to do something right now, sign ONE’s appeal to world leaders to rapidly halt this growing gender gap.

In this digitally driven world, the smarts and brilliance of the Web Summit community are constantly innovating the way we live, work and act. We need people to work together to make sure that passion and creativity should be of benefit to everyone regardless of where they were born and with which chromosomes.