def pageRankExtended(grafo, node, ):
    d = 0.15

    res_parcel_1 = d * (prior / sumPrior) + (1-d)


def sumPrior(grafo):

 sum_res = 1.0
    for key_phrase in graph:
        if key_phrase_pj in graph:
            print graph[key_phrase_pk]
            for key_phrase_aux in graph[key_phrase_pk]:
                print key_phrase_aux
                if key_phrase_pj == key_phrase_aux:
                    sum_res = (0.375*0.25)/(sumDenominator(graph, key_phrase_pk, key_phrase_pj))
    print sum_res
    return sum_res


    def calculatePrior(graph, node, flag):
    probability = 1.0
    if flag != 0:
        for keyphrase in graph:
            if keyphrase == node:
                probability += 1
        return probability
    return probability




    def score_candidates(filename):

    file_name = open(filename)
    train = fetch_20newsgroups(subset='train')
    vectorizer = TfidfVectorizer(use_idf=False, stop_words='english', ngram_range=(1, 3))
    vectorizer.fit_transform(train.data)
    my_doc_tfidf = vectorizer.transform(file_name)

    feature_names = vectorizer.get_feature_names()
    dense = my_doc_tfidf.todense()
    densed_idf = dense[0].tolist()[0]
    scores = zip(range(0, len(densed_idf)), densed_idf)
    feature_sorted = sorted(scores, key=itemgetter(1))[-5:]

    feature_name_sorted = []
    key_phrases_dic = {}
    key_phrases_values = {}

    for pair in feature_sorted:
        feature_name_sorted.append(feature_names[pair[0]])
        key_phrases_values[feature_names[pair[0]]] = pair[1]

    for word in feature_name_sorted:
        key_phrases_dic[word] = 0


    return key_phrases_dic, key_phrases_values, feature_name_sorted

def phrases_spliter(filename):
    list_phrases = []
    with open(filename, 'r') as file:
        all_phrases = file.read().strip().split('.')
        for words in all_phrases:
            list_phrases.append(words.split())
        return list_phrases

def create_graph(list_phrases, key_phrases_dic):
    graph = {}
    list_keywords_phrase = []
    for phrase in list_phrases:
        for word in phrase:
            if word in key_phrases_dic:
                list_keywords_phrase.append(word)
                graph[word] = list_keywords_phrase
        list_keywords_phrase = []
    return graph